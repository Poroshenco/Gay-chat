
<link href="~/css/FindUsers.css" rel="stylesheet"/>

@{
    ViewData["Title"] = "FindUsers";
}

@inject UserManager<ApplicationUser> Manager

@using GayChat.Extensions
@using GayChat.Models.ITCHat
@model List<ApplicationUser>

@{
    var margintop = "7%";

    var containerWidth = "840px";
    
    var downloaderwidth = "50%";
    var downloaderMargin = "250px";

    if (Context.Request.IsMobile())
    {
        containerWidth = "auto";
        margintop = "16%";
        downloaderMargin = "100px";
        downloaderwidth = "80%";
    }
}


<link href='https://fonts.googleapis.com/css?family=Kalam' rel='stylesheet'>


<div id="predownloader">
    <div class="progress" style="width: @downloaderwidth; margin: auto; margin-top: @downloaderMargin">
        <div class="indeterminate"></div>
    </div>
</div>

<div id="app" style="opacity: 0">

    <div class="row" style="width: 300px; margin: auto; margin-top: @margintop;">
        <div class="input-field col s12">
            <i class="material-icons prefix" style="margin-top: 9px">search</i>
            <input id="icon_prefix" v-model="find" type="text" style="margin-left: 32px;">
            <label for="icon_prefix" style="margin-left: 32px">Search</label>
        </div>
    </div>

    <div v-if="sortUsers.length > 0" class="container" style="width: @containerWidth">


        @if (!Context.Request.IsMobile())
            {

            <div class="findUsersDiv" v-for="user in sortUsers">

                <div style="width: 100%; height: 55px; opacity: 0.95 ">

                    <div style="float: left; width: 155px; height: 100%; text-align: right">
                        <p style="color: #6d4c41 ; font-size: 17px; margin-top: 17px; margin-right: 2px; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif">{{user.FullName}}</p>
                    </div>


                    <div style="float: left; width: 60px; height: 100%">
                        <img style="width: 54px; height: 54px; margin: 3px; margin-bottom: 0px; border: 2px solid #6d4c41; border-radius: 50%" :src="'/UserImages/' + user.Nickname.substring(1) + '.jpg'" />
                    </div>

                    <div style="float: left; width: 155px; height: 100%">
                        <p style="color: #6d4c41 ; font-size: 18px; margin-top: 18px; margin-left: 2px; font-family: 'Kalam'; text-decoration: underline ">{{user.Nickname}}</p>
                    </div>

                </div>

                <p style="font-size: 17px; margin: 0px; color: #6d4c41; text-align: center; width: 100%; font-family: Georgia, 'Times New Roman', Times, serif">
                    Дьякон
                </p>
                
                <div style="width: 100%; margin-top: 5px; padding-left: 15px; padding-right: 15px">
                    <a href="#!" class="waves-effect waves-light btn baton" style="margin: 0px; padding: 0px; width: 110px" v-on:click="buttonOnClick(user)" >{{user.ButtonText}}</a> @*v-bind:style=" { backgroundColor: user.ButtonColor } "*@


                    <form asp-action="StartChat" asp-controller="Account" method="post" style="float: right">
                        <input v-model="user.Id" type="hidden" name="userId" />
                        <button type="submit" class="waves-effect waves-light btn baton" style="width: 110px;">SEND</button>
                    </form>
                </div>

            </div>


        }
        else
        {
            <div v-for="user in sortUsers" style=" width: 320px; padding-bottom: 12px; padding-top: 5px; margin: auto; margin-bottom: 20px; opacity: 1; background: #f5f5f5; box-shadow: 0px 3px 8px #8d6e63 ">

                <div style="width: 100%; height: 55px; opacity: 0.95 ">

                    <div style="float: left; width: 130px; height: 100%; text-align: right">
                        <p style="color: #6d4c41 ; font-size: 15px; margin-top: 16px; margin-right: 2px; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif">{{user.FullName}}</p>
                    </div>


                    <div style="float: left; width: 60px; height: 100%">
                        <img style="width: 50px; height: 50px; margin: 3px; margin-bottom: 0px; margin-top: 2px; border: 2px solid #6d4c41; border-radius: 50%" :src="'/UserImages/' + user.Nickname.substring(1) + '.jpg'" />
                    </div>

                    <div style="float: left; width: 130px; height: 100%">
                        <p style="color: #6d4c41 ; font-size: 16px; margin-top: 17px; margin-left: 2px; font-family: 'Kalam'; text-decoration: underline ">{{user.Nickname}}</p>
                    </div>

                </div>

                <p style="font-size: 16px; margin: 0px; color: #6d4c41; text-align: center; width: 100%; font-family: Georgia, 'Times New Roman', Times, serif">
                    Дьякон
                </p>
                
                <div style="width: 100%; margin-top: 5px; padding-left: 15px; padding-right: 15px">
                    <a href="#!" class="waves-effect waves-light btn baton" style="width: 110px; margin: 0px; padding: 0px; font-size: 13px">{{user.ButtonText}}</a>


                    <form asp-action="StartChat" asp-controller="Account" method="post" style="float: right">
                        <input v-model="user.Id" type="hidden" name="userId" />
                        <button type="submit" class="waves-effect waves-light btn baton" style="width: 110px; font-size: 13px">SEND</button>
                    </form>
                </div>

            </div>
        }


    </div>

    <div v-else style="margin: auto; width: 300px; height: 70px; margin-top: 30px ; box-shadow: 0px 3px 7px #8d6e63; background: #f5f5f5">
        <p style="text-align: center; font-size: 23px; padding-top: 16px; font-family:'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif; color: #a1887f  ">No one found</p>
    </div>

</div>

<script>
    var app = new Vue({
        el: '#app',
        data: {
            users: {},
            find: "",
            show: false,
        },

        methods: {

            updateUsers: function () {
                $.ajax({
                    url: '/Account/UsersString',
                    type: 'GET',
                    success: function (data) {

                        this.users = JSON.parse(data);;

                    }.bind(this)
                });
            },

            buttonOnClick: function (user) {

                if (user.ButtonText === "Invite") {
                    user.ButtonText = "Invited";
                    user.ButtonColor = "#757575";

                    this.inviteFriend(user.Id);

                }

                if (user.ButtonText === "Subscriber") {
                    user.ButtonText = "Friend";

                    this.acceptInvite(user.Id);
                }

            },

            acceptInvite: function (id) {
                $.ajax({
                    url: '/Account/AcceptInvite',
                    type: 'POST',
                    data: {
                        subscriberId: id
                    },
                });
            },

            inviteFriend: function (id) {
                $.ajax({
                    url: '/Account/Invite',
                    type: 'POST',
                    data: {
                        friendId: id
                    },
                });
            }
        },

        computed: {
            sortUsers: function () {

                if (this.show) {
                    return this.users.filter(e => e.Nickname.includes(this.find) || e.FullName.includes(this.find));
                }
            },

        },

        mounted() {

            $.ajax({
                url: '/Account/UsersString',
                type: 'GET',
                success: function (data) {
                    this.users = JSON.parse(data);
                    this.show = true;

                    $("#predownloader").animate({ opacity: 0 }, 700, function () {
                        $("#predownloader").css({ display: "none" });
                        $("#app").animate({ opacity: 1 }, 700);
                    });
                }.bind(this),
            });

            setInterval(function () {

                this.updateUsers();

            }.bind(this), 5000);

        }
    })

</script>
